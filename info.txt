## Section 1: Introduction

1. Introduction to Testing Library and Jest
	No es solo una libreria es una filosofia, "opinionated", es lo que llamamos obstinado, lo que significa que la forma en que está escrita la biblioteca fomenta un cierto conjunto de prácticas y, en este caso, esas son las mejores prácticas para reaccionar en las pruebas.
		Testea tu soft de la manera que el usuario lo usa, no como esta escrito el soft.
			Lo que importa es si el software funciona como debería funcionar, porque el código puede cambiar, pero puede seguir comportandose igual de acuerdo a las especificaciones, entocnes los test van a seguir pasando.
	
	Encontra elementos por elementos de accesibilidad en vez de usar test ids, esto hace tu codigo sea realmente accesible (para los screen readers), por ende tu soft accesible.
	
	- Con RTL no necesitas de un browser, provee un DOM virtual para los test.
	- Jest se ocupa de:
		buscar los test, correrlos y determinar cuales pasan y cuales no.
		
	npx crea-react-app color-button
	
2. Create-React-App
	npm package
	Crea una aplicación de react con:
		configuración
		webpack y babel
		web server
		testing library
		
	npx create-react-app 
		baja siempre la ultima versión de todo
		no depende de cuando instalaste create-react-app
			nunca la instala en tu maquina
		viene con npm 5.2+ >
		si queres una version mas viena de npm y no podes hacer upgrade
			https://github.com/facebook/create-react-app siguiendo el link "instructions for older npm versions"
			https://create-react-app.dev/
			
3. First Test with Testing Library
	
	npm test 
		corre jest en watch mode:
			busca por cambios desde el ultimo commit
			solo corre los test de esos archivos
			no hay cambios, no se testea.
	
	npm test a -> corre todos los test
	npm test f -> solo failed test
	npm test q -> para salir de watch mode
	npm test p -> filtra un nombre de archivo por regex
	npm test t -> filtra el nombre de un test por regex
	
	npm test App -> este test ya lo crea-react-app
	
	
	App.test.js
	
	import {render, screen } from '@testing-library/react';
	import App from './App';
	
	test('renders learn react link', () => {
		render(<App/>);
		const linkElement = screen.getByText(/learn react/i);
		expect(linkElement).toBeInTheDocument();
	});
	
	explicación:
		render: 
			crea un virtual dom para los argumentos JSX
			accedes a ese virtual dom via screen global
			* ambos vienen de la libreria 
		screen
			screen.getByText(/learn react/i); 
			es case sensitive sin el (i) o sea, sin usar regex
			busca un elemento en el dom mediante su texto.
			puede ser una regex o no
		expect 
			hacemos assertions, o sea, causa que el test falle o sea exitoso.
			
	
4. Jest and Jest-DOM Assertions

	Las "afirmaciones" -assertions- determinan cuando un test pasa o falla.
		
	expect(linkElement).toBeInTheDocument();
		expect: jest global, comienza la afirmación
		argumento (linkElement): sujeto de la afirmación
		matcher (toBeInTheDocument()): 
			tipo de afirmación, este comparador viene del DOM de jest.
			puede o no tener argumentos que refinan el match.
		
	Afirmaciones de ejemplo:
		expect(element.textContent).toBe('hello');
		expect(elementsArray).toHaveLenght(7);
		
	jest-dom  
		es el que tiene los matchers (funciones que validan cosas) y el que corre los test.
		viene con create-react-app
		src/setupTest.js es importado antes de cada test, hace que los comparadores esten disponibles.
		DOM-based matchers, son comparadores que estan en el DOM y aplican solo al virtual dom.
			ej: toBeVisible() o toBeChecked()

5. Jest: Watch Mode and How Tests Work
	
	Ayuda a RTL, renderizando componentes en el virtual DOM mediante el metodo render.
	Ayuda en la busqueda del elementos ne el virtual DOM.
	Interactua con el virtual DOM, clickeando elementos, etc.	
	React necesita un test runner, que los busque, corra y haga afirmaciones. =  jest.
	Es recomendado por Testing Library
	Viene con create-react-app
	
	npm test corre un script npm que corre jest en watch mode.
		watch mode busca por cambios en archivos desde el ultimo commit.
		solo corre los test relacionados a ese test.
		no hay cambios? no testea
		
		o sea, si testeaste y commiteaste, después cuando corras otra vez y si no hiciste cambios, te dice que no hay test hallados para testear porque no cambio nada desde el ultimo commit.
		
		git commit -am"texto" -> shorcut: add y commit
	
	Como funciona Jest?
	
		test es un metodo global, con 2 argumentos 
		test(string descriptionDelTest, test function) 
		el test falla si cuando pasa cualquier error al correr la funcion.
		solo fallan cuando el except falla.
		un test vacio, es un test que pasa :) porque no hay error.
	
		ej:
		test('renders learn react link', () => {
		
		});
		
6. TDD: Test Driven Development

	Escribir los test antes de escribir codigo después escribis el codigo de acuerdo a las especificaciones del test, haces que el test pase.
		También se lo llama red-green test, ya que primero falla y después funciona.
		
	Escribis la funcion o sea el nombre de tu componente, sin codigo
	Escribis el test
	Haces que falle
	Escribis el codigo del componente 
	Haces pasar el test.

	Porque TDD?:
	
	 Dice que sentis una gran diferencia al escribir el test, porque lo haces parte del proceso de escribir codigo y no algo que tenes que hacer después.
	 Es mas eficiente.
	 Re run los test todo el tiempo y podes hacer pruebas de regresion, onda, fijarte que no rompiste nada de nada.

7. React Testing Library Philosophy

	Tipos de test:
	
		unit test:
			testea una unidad de codigo, una funcion o componente, en isolation. (aislado)
		
		integration test:
			como multiples partes funcionan juntos.
		
		functional test:
			testea un función particular del soft (o sea COMPORTAMIENTO) (una una funcio´n en si, sino como funciona o que hace un input cuando escribis, por ej)
			que el input sea rojo cuando pones info invalida, no validas codigo sino "comportamiento", o sea lo que ven los usuarios.
		
		acceptance / end-to-end test (e2e)
			usa un browser y un servidor, ej cypress, selenium.

8. Functional Testing vs Unit Testing

	unit testing (como esta escrito el soft)
		cuando testeas una funcion o componente, tenes que mockear las dependencias
		+ podes determinar con precisión las fallas
		- a veces te falla el test pero al usuario no le falla nada
		- a veces al usuario le falla pero a vos no el test  :happy_sad_man:
		- es mas probable a romperse por refactors.
	
	functional testing: tenes que incluir todo lo relevante a cada unidad testeada, se testea comportamiento.
		+ se acerca a como interactua el usuario, o sea que si hay fallas, seguramente el usuario tambien las tenga
		+ test mas robustos.
		- mas dificil de debuggear, porque el test no esta tan desacoplado del codigo.

9. TDD (Test Driven Development) vs BDD (Behavior Driven Development)

	TDD: (Testing Driven Development)
		como los usuarios usan la app.
		anima a testear comportamient sobre implementacion
		
	BDD: (Behavior Driven Development)
		es definido explicitamente, tienen que colaborar varios roles, desarrolladores, qa, aprtest, etc.
		define procesos de como diferentes grupos interactuan.	
		
10. Testing Library and Accessibility
	
	Se recomienda encontrar elementos por manejadores de accesbilidad.
	https://testing-library.com/docs/queries/about/#priority
	https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#roles
	lo que recomiendan es que si es una etiqueta a, no te quedes con usar getByText, sino que uses getByRole, esto se usa así:
		screen.getByRole('link', { name: /learn react/i});
		en este link te dice que roles son accesibles: https://www.w3.org/TR/wai-aria/#role_definitions
	
	Idealmente tu app tiene que ser friendly screen readers.
	
## Section 2: Simple App: Color Button

11. Overall Course Plan
	https://github.com/bonnie/udemy-TESTING-LIBRARY

	Focus en la sintax de RTL
	cambiar boton, deshabilitar boton
	introduce las interacciones de usuarios que afectan al dom, unit testing functions..
	crear algo mas complejo y testearlo.
	crea una segunda app para comprar helado
		teste interacciones mas complejas de usuario y componentes.
		mockea respuestas del servidor con Mock Service Worker.
		teste funcionalidad asincronica.
	
12. Start Color Button App
	
	1. Borra lo que hay en App y hace como que todavía no programo nada.
	2. Describe los test que va a testear:
		color inicial del boton.
		texto inicial.
		que cuando lo clickees cambie de color.
	3. genera el código para testear los casos.
		cuando usas getByRole el name es lo que esta escrito en esa etiqueta, ej <button>click me</button>
		con toHaveStyle va a verificar que el boton sea rojo, como supuestamente debería estar inicialmente.
	4. corre el test, y no funciona porque no hizo el código, que seria la manera correcta de hacer tdd
	5. hace el código y ejecuta el test satisfactoriamente.
	
	https://github.com/testing-library/jest-dom
	https://www.w3.org/TR/wai-aria/#role_definitions
	
13. Test that Finds Button by Role and Clicks Button
	
	Cuando no encuentra un rol te dice che, estos son los roles que tenes disponible en tu componente
	Recomienda no copiar y pegar sino hacerlo a mano así te queda la sintaxys
	
	Habla de código repetido, que podemos meter mas assertios en uno mas que nada uando haces functional testing, 
	ej verificar el estilo, lanzar un evento, verificar que este en el documento, etc...
	
	vuelve a hacer lo mismo, genera el test, fallan y después códifica.
	
	El código de ella lo va dejando acá:
		https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/lecture-code

14. OPTIONAL React Code: Click Button to Change Color

	importa useState para poder hacer el cambio de color.
	explica que el test falla aunque parte del test esta ok, eso pasa cuando pones varios afirmaciones en una, hay que tener en cuenta eso.
	
15. Manual Acceptance Testing

	Probar que lo que se renderiza manualmente para verificar que
	realmente este pasando lo mismo que se testea.

16. Test Initial Condition of Button and Checkbox
	
	Agregó un checkbox, e hizo el test, ver código
	
17. Introduction to Code Quizzes

	Da specificaciones y pistas para crear el test
	Proposito:
		Practicar lo que aprendimos
		Reforzarlo en memoria
		Exponer areas donde sabes las respuestas
	Empezar con mucha orientación
		construir el código de los examenes con poca orientación.

	Vos elegis:
		Solo hay que codear los test (testear el codigo provisto en github
		https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/code-quiz
		También podes código y hacer los test
	Recomienda hacer ambos (codear y testear)
		Te metes mas en como codigo y test interactuan
		Practicas debuggear test y codigo al mismo tiempo
	Opcion de usar codigo pre escrito para:
		aquellos con poco tiempo
		ayudate en debuggear cuando el codigo o el test son el problema
	
		
18. Code Quiz! Confirm Button Disable on Checkbox Check
		
	Agregar la funcionalidad del checkbox...
	Cuando el checkbox es checked, el boton debería estar deshabilitado
		Pensa como podrías hacer que el checkbox este checked en los test
		fireEvent.click
		2x en test: una vez deshabilitado el boton, volverlo a habilitar
	Afirmaciones en el boton:
		expect(button).toBeEnabled()
		expect(button).toBeDisabled()
	Nuevo test o usar el existente?	
	
	Orientación en el código de react:
		checkbox controla al boton via boolean state
			state determina el valor disabled al atributo del boton
			ella recomienda llamar al estado disabled, por default false
		onChange for checkbox
			{(e) => setDisabled(e.target.checked)}
		
19. Code Quiz Solution: Confirm Button Disable on Checkbox Check
	
	* Saltear si queres hacerlo primero, sino:
	
		Muestra el test checkbox disables button on first click and enables on second click!
		Muestra que estan fallando porque no hizo el código aún
		Lo arregla y muestra que funciona
	
20. Finding Checkbox with Label

	Le va a agregar un label al checkbox, así puede encontrar otro checkbox de haber mas de uno.

21. Code Quiz! Disabled Button Turns Gray

	Determinar que el boton sea gris cuando este disabled

	hay que usar el color "gray"
	hay que simular como el usuario puede usar la app
		deshabilitar el boton -> esta gris > habilitarlo el boton es rojo.
		click en el boton para cambiar el color - disable -> boton gris
		habilitar el boton -> azul
	las afirmaciones deben ser al final de cada flujo.

	2' muestra su solución.

22. Unit Testing Functions

	Funciones separadas del componente:
		son usadas por varios componentes
		logica compleja
	unit test si:
		la logica es complicada para testear con functional test.
		muchos casos extremos, cuando solamente queres ver que funcione la función apra estos casos.


	Dice que nuestro nuevo pedido es que los clientes esta cansados de los colores que hay y quieren otros especificos.

	Hace una función nueva en App replaceCamelWithSpaces sin código, para que falle el test.

	Comenta que la manera de agrupar test es con Describe
	Exporta la función en el archivo de test.
	Hace fallar los test, después agrega código a la función y los test funcionan.

23. Code Quiz! Update Tests for New Color Names

	quiere que en este test hagamos un test que chequee que el test arranque con el color MediumVioletRed, y cambie a MidnightBlue
	Updatear los test existentes
		espera que el comportamiento cambie
	los test de checkbox deberían seguir funcionando, onda prueba de regresion.

	1:23 da su solución.

24. When to Unit Test

	la función que hicimos puede cubrirse con test funcionales 
	para funciones mas complicadas, el test unitario auyda a:
		cubrir todo lo posible
		determinar que causa funcional puede hacer fallar los test
	el problema con los test funcionales:
		son retisentes a refactors
		puede generar problemas para detectar qué falla 

25. Review: Simple App

	Que aprendimos? 
		a testear interactividad con fireEvent
		afirmaciones con jest-dom:
			toBeEnabled
			toBeDisabled
			toBeChecked
		getByRole option { name : '' }
		jest describe para agrupar test
		unit testing functions
			como probar una función 

# Section 3: ESLint with Testing Library, plus Prettier

26. ESLint and Prettier

	ESLint es un linter
		linter es una herramienta que analiza texto estatico y marca donde se rompe la sintaxis.
		estatico: analiza como fue escrito, no que pasa cuadno corre 
		mantiene el estilo de codigo consistente
			especialmente para varios proyectos donde trabajan varias personas 
		atrapa errores en el código
			como usar una variable antes de estar definida
			importar un archivo inexistente, etc..

	Prettier es un formateador
		automaticamente formatean el código, indentación, espacios..
		ejemplo: espacios alrededor de llaves.

	
	linters 
		formato y estilo, ej:
		metodo preferido de afirmaciones con por ej toBeChecked

	Plugin extend ESLint
	testing library y jest-dom eslint plugins
		fuerza mejores Practicas
	https://github.com/testing-library/eslint-plugin-testing-library
	https://github.com/testing-library/eslint-plugin-jest-dom
	los plugins son customizables.
	
27. ESLint for Testing Library and Jest-DOM

	vamos a configurar eslint, eslint ya viene con cra
	tenemos que instalar el plugin:
	npm install eslint-plugin-testing-library eslint-plugin-jest-dom

	borra del package.json la config de eslint porque dice que es mejor tener ese tipo de configs por separado.

	crea un nuevo archivo .eslintrc.json
	agrega los plugins que queremos usar
	testing-library y jest-dom
	después agregar las reglas que quiere que se sigan tanto en los plugins como en otras extensiones
	
	react-app, react-app/jest, plugintesting-library/recommended, plugin:testing-library/react,
	plugin:jest-dom/recommended

	se pueden configurar pero ella por ahora va a usar lo recomendado.

	ella usa otras reglas mas que están en el código de su sitio web.

	https://github.com/testing-library/eslint-plugin-testing-library

	https://github.com/testing-library/eslint-plugin-jest-dom

28. Configure ESLint in VSCode

	https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations

	para hacer congis especificas para el proyecto actual, hay que crear una carpeta .vscode y adentro setting.json

	hay que verificar de tener instalada la extension eslint

	una vez que configuras, por ej, te marca los archivos en rojo que no cumplen con eslint, te fijas que te marca y sin tocar nada guardas el archivo y lo fixea solo con las recomendaciones.

	y por ultimo agrega al gitignore:
	.vscode
	.eslintcache

	también muestra en que lugar tenes que poner el settings.json si no queres hacer esto para cada proyecto yq ue aplique a todo

29. Configure Prettier in VSCode

	busca la extension y la installa
	agrega la configuración a settings.json
	y listo, cuando haces cambios en un archivo y guardas se te formatea solo

30. Review: ESLint and Prettier

	eslint
		instalar los package necesarios
		eliminar de package.json la config de eslint
		crear el archivo de config aparte
		instalar la extension para vscode
		crear la carpeta vscode y el archivo settings
		agregar a gitignore el cache de eslint y la carpeta vscode

	Prettier
		agregar la config a settings
		instalar prettier en vscode

# Section 4: Sundaes On Demand: Form Review and Popover

31. Introduction to Sundaes on Demand

	https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/sundae-server
	crea  una nueva app
	npx create-react-app sundaes-on-demand

	la idea de la app es:
		elegir un gusto de helado y agregado (onda bañado en chocolate) y subir la orden
		los sabores y agregados, vienen del server
		la orden es enviada al servidor

	volviendo a los test:
		va a haber mas interacciones complejas
			multiples entradas moviendote en fases
		mouseover popup
			testear que el elemento desaparezca del dom
		simulación de la respuesta del servidor
			mockear service worker, para interceptar el llamado y responder lo mockeado
		async updates
			esperar cambios del dom antes de hacer una afirmación
		global state via context
			"no se supone que implementas detalles de implementación"
			no se va a testear, solo estamos interesados en testear comportamiento.
		para los test no importa si usas redux, mobx, etc...
		la única diferencia es el setup
			tenemos que asegurarnos que los componentes esten envueltos por el contexto
			asegura funcionalidad
			evita errores

		muestra los mock-ups de la app y las interacciones, pasando de fase en fase al ir comprando (onda el totem del mc)

		el "servidor", bajarse e instalar segun las instrucciones del README
		https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/sundae-server

			es una api restful que corre en el puerto 3030
			para, manda info estatica de gustos y agregados, en una app real viene de la base..

			para el id de orden genera un nro random
			el servidor no es necesario para los test
				se va a usar mock-service-worker para mockear los Response


32. ESLint and Prettier Setup

	https://github.com/bonnie/udemy-TESTING-LIBRARY/blob/master/finished-projects/color-button/.eslintrc.json
	https://github.com/bonnie/udemy-TESTING-LIBRARY/blob/master/finished-projects/color-button/.vscode/settings.json

	hay que hacer todos los pasos anteriores, instalar los plugins sacar del package json lo de eslint, etc:
		1. instalar los plugins
			npm install eslint-plugin-testing-library eslint-plugin-jest-dom
		2. eliminar del package.json la config de eslint
		3. crear el archivo .eslintrc.json con la config:
			{
				"plugins": ["testing-library", "jest-dom"],
				"extends": [
				"react-app",
				"react-app/jest",
				"plugin:testing-library/recommended",
				"plugin:testing-library/react",
				"plugin:jest-dom/recommended"
				]
			}
		4. agregar en gitignore:
			.eslintcache
			.vscode
		5. crear la carpeta .vscode en la raiz y el archivo settings.json con la config:
			{
				"eslint.options": {
					"configFile": ".eslintrc.json"
				},
				"eslint.validate": ["javascript", "javascriptreact"],
				"editor.codeActionsOnSave": {
					"source.fixAll.eslint": true
				},
				"editor.defaultFormatter": "esbenp.prettier-vscode",
				"editor.formatOnSave": true
			}
		
		6. Probar que en App.test funcione esto (es para probar que se formatee bien y demás)
			expect(linkElement).ToHaveAttributte('checked');

			import {useEffect} from 'react'

33. React Bootstrap Setup
	en el curso se va a usar react bootstrap
		podes usar cualquier estilizador que vos quieras
	instalarlo:
		npm install react-bootstrap bootstrap
	agregar js en index.html

	De este link, se roba lo que va en index.html
		https://react-bootstrap.netlify.app/getting-started/introduction/#browser-globals
	
	De este link se roba lo que va en index.js para importar bootstrap
		https://react-bootstrap.netlify.app/getting-started/introduction/#css

	Una vez que termina solo hace un commit del archivo eslintrc (ni idea porque solo de ese..)

34. Code Organization and Introduction to SummaryForm

	Va a hacer el formulario de resumen y los test para las apariciones y desapariciones de los elementos en el dom

	las cosas que se van a testear en este formulario:
		buttons / checkbox
		popover de terminos y condiciones
			lo que hay que testear es que no este mas en la pagina
	después:
		test y código del resumen
		test y código de la funcionalidad del boton


	Organización del código por paginas
		cada pagina tendra su test
		jest va a encontrar los test y va a correr cualquiera que termine en .test.js
	src/pages/summary
		OrderSummary.jsx
		SummaryForm.jsx
	src/pages/summary/test
		SummaryForm.test.jsx

35. Code Quiz: Checkbox Enables Button

	https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/code-quiz
	https://github.com/testing-library/jest-dom
	https://testing-library.com/docs/react-testing-library/cheatsheet/

	Escribir test para asegurarnos de:
		checkbox esta destildado por default
		checkear que el checbkox habilita el boton
		destiladar el checkbox y deshabilitar el boton
	una chance de configurar tu propio archivo de test desde 0
		usar test ya hechos como modelo
		renderizar el componente <SummaryForm>
	Buscar el checkbox y el boton usando la opción { name }
		usar mockup para name options values
	checkear que los test fallen, siemper es red-green testing

	tratar de no hacer copy/paste
		recordar usar los materiales que fue pasando los links
	si aún así lo haces, recomienda tipearlo no copiarlo, asi´queda

	no es necesario escribir el código del componente para que pase el test
		esto lo vas a hacer en la proxima lectura con ella
		tampoco espera que sepas react-bootstrap

	te hace pausar el video e intentarlo, después empieza a dar la solucion 3:13
		
36. OPTIONAL React Code: SummaryForm Checkbox and Button

	muestra el código que hizo para el componente

37. React Bootstrap Popover and Testing Library userEvent

	https://github.com/testing-library/user-event

	se fija como funciona el popover de boostrap para saber como testear, por ej, cuando pasas con el mouse esta, pero cuando sacas de encima se elimina del dom, n oes que lo ponen hidden

	fireEvent

	hay que instalar:
		npm install @testing-library/user-event @testing-library/dom
	
	esta recomendado usar userEvent sobre fireEvent, porque tiene funcionas mas avanzadas

	* userEvent es una biblioteca complementaria

	modifica los fireEvent por userEvent
	arranca con el nuevo test para el popover
	lo sigue en el proximo.

38. Screen Query Methods

	command[All]ByQueryType

	command
		get: espera que el elemento este en el DOM
		query: espera que el elemento no este en el dom
		find: espera que el elemento aparezca asincronicamente

	[All]
		(exluir) espera un solo match
		(incluido) espera mas de un match

	QueryType
		Role (mas usado)
		AltText (imagenes)
		Text (display elements)
		Form elements:
			PlaceholderText
			LabelText
			DisplayValue
	
	Referencias:
		https://testing-library.com/docs/queries/about/#priority
		https://testing-library.com/docs/react-testing-library/cheatsheet/
		https://testing-library.com/docs/queries/about/

		test id tiene que ser tu ultima opción porque los usuarios no interactuan con eso.

39. Testing Element is Not on Page: Start Popover Tests

	hace el código del test del popover
	falla porque no esta hecho el popover

40. OPTIONAL React Code: Popover

	hace el código en SummaryForm
	https://react-bootstrap.netlify.app/components/overlays/#popovers

41. "Not wrapped in act(...)" Error, Async Disappearance

	react actualiza el elemento despues de que termina el test
	no seguir ese aviso
		testing library ya hace eso por nosotros

	https://testing-library.com/docs/guide-disappearance/
	https://kentcdodds.com/blog/fix-the-not-wrapped-in-act-warning
	https://testing-library.com/docs/preact-testing-library/api/#act

	para arreglar este error:
		que es lo que esta terminando después de que terminar el test?
		para el cambio:
			esperarlo
			afirmarlo
			mas info en el link de kentc

			waitForElementToBeRemoved
			ya usando eso se puede borrar la afirmación porque el metodo lo tiene incluido

42. Review: Summary Form

	flujo de los checkbox
	mouseover para terminos y condiciones
		userEvent.hover y unhover
		queryByText y not.toBeInTheDocument
		metodo asincrono waitForElementToBeRemoved
		warning act(...)

# Section 5: Simulating Server Response with Mock Service Worker

43. OrderEntry Server Data Introduction

	testear que se renderice el componente options
	usar mock service worker
	mockear la respuesta del servidor para /scoops y /toppings
	    con la mina codeamos scoops y toppings va a ir como quiz

44. Introduction to Mock Service Worker and Handlers
	https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/sundae-server
	https://mswjs.io/docs/getting-started/mocks/rest-api
	https://mswjs.io/

	proposito:
		interceptar las llamadas
		retornar response especificos
!	hay que prevenir hacer request en los test
	configurar las condiciones usando las respuestas del servidor

	npm install msw
	crear Handlers
	crear test server
	asegurarnos que los test del servidor esten escuchando durante todos los test.
		resetearlo antes de cada test.

	en src crea la carpeta mocks con un archivo handlers.js

	y usa la libreria que instaló.

	tipo de handler puede ser rest o graphql
		los metodos http a mockear: get, post, etc.
		hay que poner la url entera a mockear
			response resolver function:
				req: request object
				res: función que crea un response
				ctx: utilidad para construir un response
				https://mswjs.io/docs/basics/response-resolver
				
	muestra como es la api esa que nos hizo bajar, un server express que responde un json con info.

	en el archivo del front de la carpeta mock: handlers.js agrega una llamada a obtener scoops, y harcodea una respuesta.

	Lo sigue en la siguiente clase..

45. Setting up the Mock Service Worker Server

	https://mswjs.io/docs/getting-started/integrate/node

	se roba un pedazo de código de la pagina de mswjs, para hacer el setup del server para los mocks

	el archivo setupTest, sirve para poner código que necesitas qeu se ejecute para todos los test.

	commitea lo que hizo..

46. Tests with Mock Service Worker: Scoop Options

	en pages cre la carpeta entry y test, agrega los componentes ScoopOption y Options y crea los test en base a la respuesta mockeada que generó antes.
	
	por el momento e nlos componentes solo retorna un div

	explica que el componente options tiene que hacer el llamado al servidor, pero que igual en el test esto va a ser interceptado por service workeer y le va a retornar lo mockeado.

47. OPTIONAL React Code: Options and ScoopOption Components

	instala axios
	npm install axios

	se pone a hacer el código de ScoopOption y de Options.

!   El atributo alt de img es necesario para los test, aparte de para accesibilidad

48. Using `await findBy` to Find Elements that Populate Asynchronously

	siempre cuando estas esperando que algo aparezca asincronicamente en la pagina, NECESITAS usar await findBy 

	por ej, cambio getByRole por findAllByRole e hizo asincronico el test y awaiteo esa respuesta 

49. Code Quiz! Topping Options from Server

	usar scoops como modelo
		tipear antes de copipastear
	agregar handler para /toppings route
	el handler puede retornar 3 opciones (ver su ejemplo)
	escribir los test en options.test.jsx
	name option puede ser /topping$/i
	actualizar options.jsx y crear toppingOption.jsx

	pausa y a hacer el test. su solucion 4:53'

50. Error Server Response Planning

	hay que actualizar el catch que dejó sin código
	mostrar un error con el componente de bootstrap alert cuando axios da un error
	https://react-bootstrap.github.io/components/alerts/
	role: alert

	por defecto los handlers no retornan un error en el response.
		hay que sobreescribir para ciertos test, esto con un error..

	Jest debugging Tools
		correr solo un test
		correr solo un test dentro de un archivo

	para poder debugear algo
		va a escribir codigo que no pase.

51. Simulating Server Error Response in Tests

	sobreescribe los request, seteandole statusCode 500 en los response, hace el test para que falle y en la proxima clase hace el código de OrderEntry y le agrega el alert de bootstrap

52. OPTIONAL React Code: Alert Banner for Options Server Error

	hace un componente para meter el alert de bootstrap y custmoizarlo, y donde esta la llamada de axios agrega el alert si hay un error

	cuando corre el test, le dice que no encuentra un elemento con role alert aun cuando en la pantalla se ve claramente que esta, en el proximo video muestra como ver el tema.

53. Running only Selected Tests, and `waitFor`

	si queresmos correr solo un test, podemos usar test.only
	podríamos usar test.skip, pero si tenes mas de un test es engorroso..

	bueno el tema era que como detecta una vez el alert, ya sigue y falla el lenght porque solamente espera a 1, entonces tiene que cambiar el código del test 

	en vez de usar el alert con la propiedad name:

	await waitFor(async () => {
		const alerts = await screen.findAllByRole('alert')
		expect(alerts).toHaveLenght(2)
	})

	y listo

54. Review: Server Error Response and Test Debugging Tools

	override MSW response para test individuales
	vimos porque no encontraba el role="alert"
	vimos como correr un solo archivo con p en jest watch mode
	test.only y test.skip
	waitFor cuando await findBy no es suficiente
	
# Section 6: Testing Components Wrapped in a Provider

55. Intro to Tests for Total and Subtotals

	totales y subtotales, se van a guardar en react context
	
56. Entering Text Input: Subtotal Tests

	crea los test para los componentes totalUpdates 

	dice que siempre antes de testear un input hay que limpiarlo 
		userEvent.clear(input)

	después "escribimos"
		userEvent.type(input, '1')

	.toHaveTextContent('1')

	https://github.com/testing-library/user-event
	https://testing-library.com/docs/queries/bytext/

57. OPTIONAL React Code: OrderDetails Context
	https://kentcdodds.com/blog/application-state-management-with-react/

	25' dura codeando el context, dice que en este video va a haber mucho codigo quizas un poco complicado..
		facil de perderse en los detalles
	que hay que hacer foco en el curso y los test
	es una app complicada para tener escenarios realistas
	sentite libre de dejar esta y seguir con otra

58. OPTIONAL React Code: Use Context to Display Scoops Subtotal

	agrega al código el context donde lo necesita.

59. Adding Context to Test Setup; Test Catching Error in Code

	agregar context a los test
	crea una función para formatear la moneda que era un error que tiraban los test, etc..

60. Creating Custom Render to Wrap in Provider By Default

	crea una carpeta test-utils y un archivo testing-Library
	y hace un customRender para reutilizar desde cualquier test

	https://testing-library.com/docs/react-testing-library/setup/#custom-render

61. Review: Scoops Subtotal with Context

	getByText para encontrar el totales
		exact option set to false
	number inputs
		await and findBy (porque es asincrono)
		spinbutton role 
		userEvent.clear para limpiar el texto existente
		userEvent.type para escribir 
	opción wrapper para render así applicar context Provider
	Redefine testing library render para acceder universalmente 

62. Code Quiz! Toppings Subtotal

	escribir los test para el subtotal de los toppings
	no es facil, se ponen un monton de conceptos juntos acá
		se paciente, y mira el ejemplo de scoops
	los test pueden ir en src/pages/testTotalUpdates.test.jsx

	afirmar sobre el monto default del subtotal de toppings
	buscar y clickear uno verificar que se actualice el subtotal
		ver src/mocks/handlers.js para la respuesta dl servidor (que toppings)
		usar await y find para chequebox (async)
	tildar otro box, afirmar subtotal
		esto asegura que el código puede manejar 2 box chequeados simultaneos
	tildar uno de los box en off y clickearlo otra vez, afirmar subtotal
		esto es para asegurarte que el código puede manejar check y un-check
	
	codear para pasar los test es opcional
		recomendar usar el código ya escrito para esto
			no es necesario aprender react-bootstrap salvo que quieras
		si elegis escribir el código para validar que pasen los test:
			no tenes que hacer cambios en options.jsx
				la logica para contar items y calcular subotal ya esta escrita en options.jsx
				se puede reutilizar sin cambios para toppings.
			llamar updateItemCount con 1 checkbox on o 0 checbkox off
			actualizar ToppingOption.jsx para incluir nombres y checkbox
				onChange handler
				usar checbkox from OrderSummary.jsx como modelo
	
	a partir de 1:25' esta su solución.

63. OPTIONAL React Code: Toppings Checkboxes

	el código para hacer pasar los test...
	
64. Code Quiz! Grand Total

	deberíamos hacer un test de caja negra si no consideramos la implementacion.

	ej:
		primero actualizamos scoops, después toppings
		deberíamos testear toppings antes que scoops?
		sabemos que por implementación no debería hacer diferencia
		los usuarios deberían poder hacer ambas cosas y nosotros poder cambiar la implementacio
	los test de las funciones deberían ser async?
		si, las opciones todavía necesitan ser cargadas del srevidor y mockeadas 
		await ambos scoop y otro para toppign

	como encontrar un elemento:
		desde los mocka ups grand totl debería ser del mismo tamaño que los titulos --> h2
			lo podemos buscar usando el role heading
			inluir el text en name
		note: { exact: false } (mathch parcial) no es una opción para byRole 
			si usar byRole y expresiones regulares para name 
			screen.getByRole('heading', {name: /grand total: \$/i})
			alternativa: byText y { exact: false } y no usas expresiones regulares.


	se pone a hacer los encabezados de todos los test que habría que hacer para grand total
	
	8:13 su solución

65. "Unmounted Component" Error

	problema:		
		ver primero que test esta dando el error de que no se puede actualizar el estado de un componente desmontado o sea, se siguen realizando acciones cuadno termina el test. lo de act pasa por lo mismo

		en el test de verificar el grand total no nos importa la parte asincronica, no nos sirve entonces..

	soluciones:
		saltar el auto cleanup 
			https://testing-library.com/docs/react-testing-library/setup/#skipping-auto-cleanup
			no es posible en el test by test 
		mockear useEffect para bypasear la llamada al servidor - NO RECOMENDADA
			porque se aleja de lo que sucede en prod.
		incluir al principio del test que afirme el cambio de estado.
			uno de esos await va a cambiar, y pasa en la resolución de la promesa de axios.
			no necesitamos incluir en todos los test porque solo lo necesitamos en uno y que se haga una sola vez 

		y si no hay un test?
			agregar await al final del test para evitar el error.
			a ella no le gusta eso (???)

		finalmente elimina el test con problema y agrega la linea que se probaba ahí, en otro. :shrek:

66. What Should Functional Tests Catch? and Refactor

	npm start, la web le quedó bastante pasable 

	hay una validación que se va a ser después.

	nuestros test deberían "agarrar" eso?
		funcion test generalmente
			testea el proceso del código y no simplemete lo estatio.
			los elementos a testear podrían cambiar en el futuro del código
		arte, no sciencia para saber que en incluir e nque tipo de test.

	va a hacer un refactor en la función que formatea los montos.

	crea una carpeta nueva utilities y pone ahí la función, va a documentar la función con jsdoc

	aun moviendo la funcion y reimportandola los test siguen pasando perfectamente

# Section 7: Final Exam: Order Phases

67. Introduction to Final Exam: Order Phases
	
	App orderPhase State
		app apsa el estado al setter: setOrderPhase a losc omponentes como props.
	Componentes llaman a setOrderPhase para moverse a la siguiente fase.
	 
	 inProgress -> review -> complete

	 hace una carpeta test en src y un archivo orderPhase.test.jsx

	 y comenta que este es un test funcional y empieza a comentar todo lo que se va a probar en este caso feliz.

	 renderizar la app
	 agregar scoop y topping
	 clickear en ordenar
	 chequear  la info de symmary segun la orden 
	aceptar termino s y condiciones 
	confirmar la orden
	confirmar el numero de orden en la pagina de confirmacion
	clickear en nueva orden y confirmar pagina
	chequear que los subtotales fueron reseteados a cierto
	necesitamos awaitear algo para evitar errores?

68. Adding a New Handler: Copy/Paste Warning!

	nuevo handler
		post order to server
			implementación: llamar al post via useEffect ?? in OrderConfirmation
				formatear la data enviada o no enviar nada
				server genera un nro randmo y lo devuelve..
		 	hacer la mimica del post para ordenar con MSW
		cuidado con copiar y crear al crear el nuevo handler
			no te olvides de cambiar get por post ?¡ jaja


69. Debugging Tips

	screen.debug() 
		muestra en pantalla como se ve el DOM en ese punto del test.
	Si estas usando getBy y falla cuando ahce la llamada del servidor u otra cosa asincronica
		NECESITAS USAR await findBy*
	leer el errror cuidadosamente 
		no te intimides or un monotn de texto
		exactamente cual afirmación esta fallando?
		copy/paste error en google
	probar código pre escrito para ver donde esta el problema en tus test o el codigo 
		claramente no es una opción viable en la vida real pero sirve mientras aprendes..

	Resolving Errors from Test
		Error: 
			unable to find role="role" 
		Posible causa: 
			por ej el role button no existe, (y esta), tratar de sacar la option name.

		Error: 
			Warning: An update to componente inside a test was not wrapped in act(...)
		P causa: 
			hay una actualización del componente después de que el test se completa, usar await findBy 

		Error: 
			Warning: Can't perform a React state update on a unmounted component. This is a no-op, but is indicates a memory leak in your application.

		P causa: 
			hay una actualización del estado del componente después de que el test se completa, usar await findBy 

		Error:
			Error: connect ECONNREFUSED 127.0.0.1
		P causa: 
			No hay un handler asociado a MSW con esa ruta y metodo.


	otras opciones para debuggear (?)

		copiar y pegar codigo que funcionar y comentar el tuyo
		si funciona verificar que es diferente con el tuyo
		ej: muestra un ejemplo de algo que le fallaba porque le estaba mandando un number cuando era un string.

	seguis atascado?
		escribi en su Q&A
		enviarle tu repo
		buscar atnes en q&a si no la lrespondieron ya

70. OPTIONAL React Hints for Order Phase Coding

	tenes que crear u nnuevo componente que es el de 
	
	OrderConfirmation component

		state with orderNumber que arranque en nulo.
		si orderNumber es nulo display Loading.
		useEffect para llamar cuando se monte el componente
		setear orderNumber con lo que responde axios.
		dejar en error un TODO practica opcional.

	react coding Hints
		keep orderPhase in App-level state
			pass setter to top-level page components
			el valor de orderPhase determina cual pagina/componente hay que mostrar
			para simplicidad, envolver todo en el context Provider
				incluso cuando la pagina de confirmación no lo necesite.
		botones que actualizan el estado de orderPhase en las paginas	
			clickear el llamado al boton por props. 
		reset context maps después de hacer clic en nueva orden
			context necesita un array adicional item resetOrder

71. Final Exam Solution

	muestra su solución..
	
72. OPTIONAL React Code: Order Phases

	muestra el código que hizo para que pasen los test

73. Jest Mock Functions as Props

	cuando y porque mockear jest como funcion y pasarlo como propiedad
		agregar una prop to top level component page
			setOrderPhase
		otros componentes también tienen funciones como props
			updateItemCount for the ScoopOption/ToppingOption
			component
		puede necesitar pasar como prop cuando renderizas en los test
			typescript, proptypes u otros props validatoins lo requeriran
		o la vamos a llamar en los test, pero el test no la necesita
			testear que la cuenta de scoop es invalida si llama a updateItemCount

	passing a mock as prop
		como pasarla cuando estas renderizando un componente en los test?
		jest.fn()
			jest mock function
			no hace nada
			simplemete un placeholder para evitar errores.

74. Review: Final Exam, and Introduction to Optional Practice

	aprendimos tecnias para resolver problemas
		screen.debug()
		reading test error output cuidadosamente
		probables causas comunes de error
	pasar placeholder functions como prop jest.fn()

	la proxima sección es opcional puramente de practica y solo se aprende .toHaveClass para revisar que clase tiene un elemento y guias para cuestionarte cuando creas un nuevo test

# Section 8: Optional Extra Practice

75. Standard Questions for New Tests and Introduction to Exercises

	que renderizar?
		cual es el componente mas chico que engloba los test?
		necesitamos pasarle props?
		necesitamos envoler al componente en un provider?
			el provider se usa? en el componente a testear?
		donde deberían ir os test?
			que archivo, es necesario que agregue uno?
		que testeo?
			cual es el comportamiento que necesito testear?
		como testear
			que queries y eventos?
		necesito await?
			hay algo asincronico?

	menciona los ejercicios de toda la sección

76. Confirm "Loading" Text

	confirmar que la pagina de confirmación setea en true par que se muestre el loading, mientras se esta cargando en nro de orden desde el servidor
	update el camino feliz
		test loading aparece y desaparece
	ppodría usar waitForElementToBeRemoved como con terminos y condiciones
		no es necesario porque podemos awaitear después de que desaparece loading 
		al popover no es posible testearlo porque no aparece mas cuando desaparec
	en este caso simplmente podemos usar la query para afirmar que loading no esta ahi
		usar el cheat sheet como Referencias
		https://testing-library.com/docs/react-testing-library/cheatsheet
	no es TDD porque ya tenemos el código escrito
		no queremos agregar esto al examen final ya se hizo demasiado.

	se hace las preguntas de antes.. y muestra su solución.

77. Conditional Toppings Section on Summary Page
	
	no mostrar toopping heading en el resumen si no eligió nada
	similar al camino feliz test
		nuevo test ya que la salida es diferente

	se hace las preguntas de antes.. y muestra su solución.
	
78. Disable Order Button if No Scoops Ordered

	deshabilitar el boton al menos que haya un scoop seleccionado.

	se hace las preguntas de antes.. y muestra su solución.

79. Red Input Box for Invalid Scoop Count

	validar el valor ingresado en cada scoop porque al ser un number pueden poner nro negativo
	chequea cual es la clase que le pone bootstrap para cuando es invalido un input y después la usa en el test .is-invalid 

	se hace las preguntas de antes.. y muestra su solución.

80. No Scoops Subtotal Update for Invalid Scoop Count

	validar que no se actualice el subtotal cuando el nro ingresado  sea erroneo

	se hace las preguntas de antes.. y muestra su solución.

81. Server Error on Order Confirmation Page

	testear el alerta cuando hay un error de servidor
	se hace las preguntas de antes.. y muestra su solución.

82. Congratulations and Thank You!
	 ...